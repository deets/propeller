'' =================================================================================================
''
''   File....... ads111X.spin2
''   Purpose.... Control an ADC of the ads111X series by TI
''   Author..... Diez "deets" Roggisch
''               Copyright (c) 2021 Diez B. Roggisch
''               -- see below for terms of use
''   E-mail..... deets@web.de
''
'' =================================================================================================
con
  #0, CONVERSION, CONFIG, LO_THRESH, HI_THRESH
  #0, PU_NONE, PU_1K5, PU_3K3, PU_15K                           ' pull-up options, forwarded from i2c
  #0, PGA6144, PGA4096, PGA2048, PGA1024, PGA0512, PGA0256, PGA0256_, PGA0256__ ' Gain settings
  #0, SPS8, SPS16, SPS32, SPS64, SPS128, SPS250, SPS475, SPS860
  #0, CONTINUOUS, SINGLESHOT ' Constants for conversion mode
  #0, COMP_TRADITIONAL, COMP_WINDOW ' Comparator behaviour
  #0, COMP_POL_ACTIVE_LOW, COMP_POL_ACTIVE_HIGH ' ALERT logic level
  #0, COMP_LATCH_NO, COMP_LATCH_YES
  #0, COMP_LAT_1, COMP_LAT_2, COMP_LAT_4, COMP_LAT_OFF
var
  byte adr
  byte buf[2]
obj
  i2c : "jm_i2c"

{
  Start the object with

  adr_: the address as defined by ads1115
  scl, sda: I2C
  khz: bus speed, 400 for full speed
  pullup: chose the pullup of the P2, see the PU_* constants

  return: if there actually is a device present under the address
}
pub start(adr_, scl, sda, khz, pullup) : result
  i2c.setup(scl, sda, khz, pullup)
  adr := adr_ << 1 ' correct for the R/W-bit
  return i2c.present(adr)

{
  Convenience method to perform one single ended
  convertion for

  channel: 0-4
  pga: gain amplifier setting, see PGA* constants
  sps: samples per second, see SPS* constants
}
pub single_ended(channel, pga_, sps_) : result
   pga(pga_)
   sps(sps_)
   mode(SINGLESHOT)
   select_single_channel(channel)
   start_single_conversion()
   repeat until rreg(CONFIG) & %1_000_0000_0000_0000
   return read_conversion()

pub select_single_channel(channel)
   mux(channel | 4)

pub read_conversion() : result
  return rreg(CONVERSION)

pub mode(value) ' CONTINUOUS or SINGLESHOT
  set_config_bits(value, 1, 8)

{
  Initiate a single conversion if in SINGLESHOT mode
}
pub start_single_conversion()
  set_config_bits(1, 1, 15)

pub comparator_polarity(value)
  set_config_bits(value, 1, 3)

pub comparator_mode(value)
  set_config_bits(value, 1, 4)

pub comparator_latching(value)
  set_config_bits(value, 1, 2)

pub comparator_queue(value) | h
  set_config_bits(value, 3, 0)

pub lo_threshold(value)
  wreg(LO_THRESH, value)

pub hi_threshold(value)
  wreg(HI_THRESH, value)

{
  Turn on the conversion ready pin is achieved by
  setting LSB LO_THRESH to 0 and MSB HI_THRESh to 1, and
  anything but 11.

  This here is the most basic setting, for a more sophisticated
  use you can use the lo/hi_threshold methods.
}
pub ready_on()
  lo_threshold(0)
  hi_threshold($ffff)
  comparator_queue(COMP_LAT_1)

pub mux(value)
  set_config_bits(value, 7, 12)

pub pga(value)
  set_config_bits(value, 7, 9)

pub sps(value)
  set_config_bits(value, 7, 5)

pub rreg(register) : value
  value := 0
  i2c.start()
  i2c.write(adr)
  i2c.write(register)
  i2c.stop()
  i2c.start()
  i2c.write(adr | 1)
  value := i2c.read(i2c.ACK) << 8
  value |= i2c.read(i2c.NAK)
  i2c.stop()
  return value

pub wreg(register, value)
  i2c.start()
  i2c.write(adr)
  i2c.write(register)
  i2c.write(value >> 8)
  i2c.write(value & $ff)
  i2c.stop()

pri set_config_bits(value, mask, offset) | h
  'send(value)
  'send(offset)
  value &= mask
  mask := (mask << offset) ^ $ffff
  'send(mask)
  h := rreg(CONFIG)
  h &= mask
  h |= value << offset
  wreg(CONFIG, h)

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

}}
